@_ECHO_OFF
tabname dockerfile-3
export DOCKER_BUILDKIT=0
SAVED_DEMO_DELAY=${DEMO_DELAY}
dclean

# Set up java demo
@_SKIPdocker pull adoptopenjdk:11-jdk-hotspot
@_SKIPdocker pull adoptopenjdk:11-jre-hotspot
cd ${DEMO_TEMP}
if [ ! -d cool-app ]; then git clone git@github.com:ciberkleid/cool-app; fi
cd cool-app
# Install dependencies into a repo in the context
if [ ! -d ./.m2/repository ]; then ./mvnw -Dmaven.repo.local=./.m2/repository dependency:go-offline; fi
# Package jar & extract (default)
if [[ -d temp-default ]]; then skip=true; else skip=false; fi
if [ $skip = false ]; then ./mvnw -Dmaven.repo.local=./.m2/repository clean package -DskipTests; fi
if [ $skip = false ]; then mkdir -p temp-default; cd temp-default; jar -xf ../target/*.jar; cd ..; fi
# Package jar & extract (layered)
if [[ -d temp-layered ]]; then skip=true; else skip=false; fi
if [ $skip = false ]; then ./mvnw -Dmaven.repo.local=./.m2/repository clean package -DskipTests -P layered; fi
if [ $skip = false ]; then mkdir -p temp-layered; cd temp-layered; java -Djarmode=layertools -jar  ../target/*.jar extract; cd ..; fi

# Set up to start demo
cd ${DEMO_TEMP}/cool-app
rm Dockerfile*
rm .dockerignore
# Copy everything, including hidden files
cp -r ${DEMO_FILES}/cool-app/. .
clear
@_ECHO_ON

# buildkit, unpack jar, entrypoint
cat Dockerfile-1
# mount type=bind
cat Dockerfile-2
ls .m2/repository
export DOCKER_BUILDKIT=1
@_SKIP./mvnw -Dmaven.repo.local=./.m2/repository dependency:go-offline
docker build . -t cool-app -f Dockerfile-2          # --progress=plain
docker images
docker run -p 8081:8081 -e "JAVA_OPTS=-Ddebug -Xmx128m" cool-app --server.port=8081
@_SKIP# http localhost:8081 # In a different window
@_SKIP# <Ctrl+C> in container process window to stop container

clear
# user
@_SKIPdocker exec cool-app whoami
docker run --entrypoint /bin/sh cool-app -c whoami
cattd Dockerfile-2 Dockerfile-3
docker build . -t cool-app -f Dockerfile-3
docker run -it --entrypoint /bin/sh cool-app

return
# layered jar
cat pom.xml
ls -la temp-*
head temp-layered/application/BOOT-INF/layers.idx
tail temp-layered/application/BOOT-INF/layers.idx
catt Dockerfile-4-layered-jar
docker build . -t cool-app -f Dockerfile-4-layered-jar
cp demo/CoolAppController-hello.java src/main/java/io/pivotal/coolapp/CoolAppController.java
docker build . -t cool-app -f Dockerfile-4-layered-jar
docker history cool-app
docker run -p 8080:8080 cool-app

# maven, distroless
cat Dockerfile-4-layered-jar-distroless
docker build . -t cool-app -f Dockerfile-4-layered-jar-distroless
