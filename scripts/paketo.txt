@_ECHO_OFF
tabname paketo
SAVED_DEMO_DELAY=${DEMO_DELAY}
dclean

unalias bat

echo "### Installing kpack and kpack logs CLI"
kubectl apply -f https://github.com/pivotal/kpack/releases/download/v0.0.8/release-0.0.8.yaml
curl -L https://github.com/pivotal/kpack/releases/download/v0.0.8/logs-v0.0.8-macos.tgz | tar zx && \
    chmod +x logs && \
    mv logs ~/opt/logs
echo "### Finished installing kpack and kpack logs CLI"


cd ${DEMO_TEMP}
if [ ! -d cool-app ]; then git clone git@github.com:ciberkleid/cool-app; fi
cd cool-app
# Install dependencies into a repo in the context
./mvnw dependency:go-offline
cd ${DEMO_TEMP}

@_SKIPpack rebase cool-app --run-image gcr.io/paketo-buildpacks/run:base-cnb
@_SKIPdocker image rm gcr.io/paketo-buildpacks/run:0.0.13-base-cnb -f
@_SKIPdocker image rm gcr.io/paketo-buildpacks/builder:base -f
@_SKIPdocker image rm cool-app:1.0.0-boot -f
@_SKIPdocker image rm cool-app:1.0.0 -f
@_SKIPdocker images | grep none | awk '{ print $3; }' | xargs docker rmi -f
clear

cd ${DEMO_TEMP}
if [ ! -d node-app ]; then git clone git@github.com:paketo-buildpacks/samples.git; mkdir node-app; mv samples/demo-apps/app-source/* ./node-app/; rm -rf samples; fi
#pack rebase node-app --run-image gcr.io/paketo-buildpacks/run:base-cnb

@_ECHO_ON
pack --help
pack set-default-builder gcr.io/paketo-buildpacks/builder:base

# node app
#pack build node-app -p node-app --builder gcr.io/paketo-buildpacks/builder:base
cd node-app
pack build node-app
docker images
pack inspect-image node-app
docker run -d -p 8080:8080 --name node-instance --rm node-app
http localhost:8080
docker exec -it node-instance /bin/sh
docker stop node-instance
@_SKIPdocker run -it --entrypoint /bin/sh node-app

@_SKIPpack inspect-builder gcr.io/paketo-buildpacks/builder:base

# rebase
@_SKIPpack suggest-builders
docker images | grep node-app
pack rebase node-app --run-image gcr.io/paketo-buildpacks/run:0.0.13-base-cnb
docker images | grep node-app

# Spring Boot
cd ../cool-app
head pom.xml
./mvnw spring-boot:build-image -DskipTests
docker images | grep builder
docker images | grep cool-app
bat pom.xml
./mvnw clean package -DskipTests -P cnb
docker run -it --entrypoint /bin/sh cool-app:1.0.0 -c "id; ls -la workspace"
pack inspect-image cool-app:1.0.0

@_SKIPdocker run -p 8080:8080 cool-app:1.0.0
@_SKIPmvn spring-boot:build-image -Dspring-boot.build-image.builder=heroku/buildpacks:18 -Dspring-boot.build-image.imageName=cool-app:heroku
@_SKIPmvn spring-boot:build-image -Dspring-boot.build-image.imageName=ciberkleid/cool-app

# kpack
kubectl api-resources --api-group build.pivotal.io
bat kpack/default-clusterbuilder.yaml
bat kpack/image-cool-app.yaml
printf "#" >> bump; git add bump; git commit -m "bump commit id"; git push
@_ECHO_OFF
cd ${DEMO_HOME}
@_ECHO_ON
kubectl get builds -n kpack-builds
logs -namespace kpack-builds -image cool-app

