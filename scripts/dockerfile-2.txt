@_ECHO_OFF
tabname dockerfile-go2
SAVED_DEMO_DELAY=${DEMO_DELAY}
export BAT_LANG_FLAG="-l Dockerfile"
export DOCKER_BUILDKIT=0
dclean
cd ${DEMO_TEMP}

# Set up demo files
go clean -x -modcache
if [ ! -d hello-go ]; then git clone git@github.com:ciberkleid/hello-go; fi
cd hello-go/src
# To initialize, run: go mod init example.com/hello; go test
unset HELLO_ARG

cp ../Dockerfiles/* .
docker build . -t hello -f Dockerfile-3

# Start demo
clear
@_ECHO_ON

@_SKIP# context
docker build . -t hello -f Dockerfile-3 | grep Sending
@_SKIPecho "FROM scratch" | docker build . -t demo -f-
@_SKIPdu -hs * | sort -h
ls
@_ECHO_OFF
export BAT_LANG_FLAG="-l exclude"
@_ECHO_ON
cp ../Dockerfiles/.dockerignore .; bat .dockerignore
@_ECHO_OFF
export BAT_LANG_FLAG="-l Dockerfile"
@_ECHO_ON
docker build . -t hello -f Dockerfile-3 | grep Sending
@_SKIPecho "FROM scratch" | docker build . -t demo -f-

clear
# security
@_SKIPdocker exec <image-name> whoami       # for a running container
docker run --entrypoint /bin/sh hello -c whoami
catd Dockerfile-3 Dockerfile-4
docker build . -t hello -f Dockerfile-4
docker run -it --entrypoint /bin/sh hello

clear
# tagging
@_SKIPecho -ne "FROM golang\nLABEL find=me" | docker build . -t demo:1.6 -t demo:1 -t demo -f-
@_SKIPdocker images --filter "label=find=me"
docker build . -f Dockerfile-4 -t hello -t hello:1 -t hello:1.6
docker images | grep hello
sed -i '' 's/world/worlds/g' Dockerfile-4
docker build . -f Dockerfile-4 -t hello -t hello:1 -t hello:1.7
docker images | grep hello
batd Dockerfile-4 Dockerfile-5

clear
# size
docker images
bat Dockerfile-6
@_SKIPdocker tag golang:latest golang:1.14.2   # (cheating)
docker build . -t hello -f Dockerfile-6
docker images
docker run hello "ninja dockerfilers"
