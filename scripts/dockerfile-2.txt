@_ECHO_OFF
tabname dockerfile-2
export DOCKER_BUILDKIT=0
SAVED_DEMO_DELAY=${DEMO_DELAY}
dclean2

export BAT_LANG_FLAG="-l Dockerfile"

# Set up demo
cd ${DEMO_TEMP}
if [ ! -d hello-go ]; then git clone git@github.com:ciberkleid/hello-go; fi
# Stash some files for later
HELLO_FILES="${DEMO_TEMP}/hello-go-temp/hello-box"
mkdir -p "${HELLO_FILES}"
# Stash hidden files
mv hello-go/hello-box/.dockerignore "${HELLO_FILES}"/

docker pull golang

# Start demo
cd ${DEMO_TEMP}/hello-go/hello-box
clear
@_ECHO_ON

go run hello-box.go everyone
ls *go*

echo -e "FROM scratch" | docker build . -f-
ls
@_SKIPdu -hs * | sort -h
@_ECHO_OFF
export BAT_LANG_FLAG="-l exclude"

@_ECHO_ON
mv "${HELLO_FILES}"/.dockerignore .; bat .dockerignore
@_ECHO_OFF
export BAT_LANG_FLAG="-l Dockerfile"
export DEMO_DELAY=0
@_ECHO_ON
echo -e "FROM scratch" | docker build . -f-
@_ECHO_OFF
export DEMO_DELAY=${SAVED_DEMO_DELAY}
@_ECHO_ON

clear
bat Dockerfile-1
@_SKIPtime docker build . -f Dockerfile-1 -t hello --no-cache
@_SKIPsed -i '' 's/Hello/Greetings/g' hello-box.go
@_SKIPtime docker build . -f Dockerfile-1 -t hello
bat Dockerfile-2
time docker build . -f Dockerfile-2 -t hello
@_SKIPsed -i '' 's/Greetings/Hi/g' hello-box.go
sed -i '' 's/Hello/Greetings/g' hello-box.go
@_SKIPtime docker build . -f Dockerfile-2 -t hello
@_ECHO_OFF
export DEMO_DELAY=0
@_ECHO_ON
time docker build . -f Dockerfile-2 -t hello
@_ECHO_OFF
export DEMO_DELAY=${SAVED_DEMO_DELAY}
@_ECHO_ON

clear
# tags
bat Dockerfile-3
echo -e "FROM golang" | docker build . -f- -t demo:1.6 -t demo:1 -t demo
docker images | grep demo
