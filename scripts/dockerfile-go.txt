@_ECHO_OFF
tabname dockerfile-go
SAVED_DEMO_DELAY=${DEMO_DELAY}
export BAT_LANG_FLAG="-l Dockerfile"
export DOCKER_BUILDKIT=0
dclean
cd ${DEMO_TEMP}

# Set up demo files
go clean -x -modcache
if [ ! -d hello-go ]; then git clone git@github.com:ciberkleid/hello-go; fi
cd hello-go/src
# To initialize, run: go mod init example.com/hello; go test
unset HELLO_ARG

# Start demo
cp ../Dockerfiles/Dockerfile .
go run hello.go && cp $GOPATH/pkg/mod/github.com/ozgio/strutil@v0.3.0/LICENSE ../big-secret-file
clear
@_ECHO_ON

# sample app
ls
go run hello.go
go run hello.go world

# first build / launch app
bat Dockerfile
docker build . -t hello-img
clear
docker images
docker run hello-img
docker run hello-img sunshine
@_SKIP# Guaranteed: same OS, package installed, binary in PATH

# tagging
cp ../Dockerfiles/* .
batd Dockerfile Dockerfile-1
docker build . -t hello-img -t hello-img:1 -t hello-img:1.6
docker images | grep hello
sed -i '' 's/world/sunshine/g' Dockerfile
docker build . -t hello-img -t hello-img:1 -t hello-img:1.7
docker images | grep hello
docker run hello-img:1.6
docker run hello-img:1

@_SKIPdocker system prune -af --filter "label=maintainer=me@example.com"
docker image prune -af --filter "label=maintainer=me@example.com"
@_SKIPdocker rmi $(docker images 'hello-img' -q)
@_SKIPdocker rmi $(docker images --format '{{.Repository}}:{{.Tag}}' | grep 'hello-img')

# build context
cp ../big-secret-file .
@_SKIPdu -hs * | sort -h
docker build . -t hello-img | grep Sending
docker run --rm --entrypoint /bin/sh hello-img -c "ls -l"
@_ECHO_OFF
export BAT_LANG_FLAG="-l exclude"
@_ECHO_ON
cp ../Dockerfiles/.dockerignore .; bat .dockerignore
@_ECHO_OFF
export BAT_LANG_FLAG="-l Dockerfile"
@_ECHO_ON
docker build . -t hello-img | grep Sending

@_SKIPdocker exec <image-name> whoami       # for a running container
docker run --rm --entrypoint /bin/sh hello-img -c "ls -l; whoami"

# user
batd Dockerfile-1 Dockerfile-2
docker build . -t hello-img -f Dockerfile-2
docker run --rm -it --entrypoint /bin/sh hello-img

# OS signals
bat Dockerfile-2 | grep ENTRY
docker run --rm --name hi -e HELLO_SLEEP=1 hello-img
# case 1: use shell to call responsible process
docker run --rm --name hi -e HELLO_SLEEP=1 --entrypoint sh hello-img -c "hello fancy-stuff"
@_SKIP# docker exec hi ps -eaf
# option 1: use exec
docker run --rm --name hi -e HELLO_SLEEP=1 --entrypoint sh hello-img -c "exec hello fancy-stuff"
# case 2: bad pid 1
docker run --rm --name hi --entrypoint sleep hello-img 10
# option 2: use tini
docker run --rm --name hi --init -e TINI_KILL_PROCESS_GROUP=1 --entrypoint sleep hello-img 30

# tini in image
bat Dockerfile-5

# layers/caching
docker images
docker history hello-img
bat Dockerfile-5
bat Dockerfile-6
@_SKIP# Talk about COPY command location, OS package commands, single command for dependencies and source
time docker build . -t hello-img -f Dockerfile-6 --no-cache
sed -i '' 's/Hello/Greetings/g' hello.go
time docker build . -t hello-img -f Dockerfile-6

# shell launch explained
cat Dockerfile-6 | grep ^ENTRY
go run hello.go one and all
go run hello.go "one and all"
docker run --rm hello-img one and all

# size
docker images
bat Dockerfile-7
docker build . -t hello-img -f Dockerfile-7
docker images
docker run --rm hello "dockerfiler ninjas"
