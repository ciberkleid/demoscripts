

Ben Hale  5:41 PM
Note the multi-layer Boot application in the last handful of layers.  How about avoidance for the 100MB of dependency JARs that you change once a quarter when Boot releases an update? (edited)

Cora Iberkleid  5:42 PM
oh wow, that's amazing to see the contents of each layer!!

Ben Hale  5:43 PM
I use dig more than I use pack at this point :star-struck:
:grinning:
1

5:43
You can set a config file so you don't have to turn off unmodified files all the time. (edited)

Cora Iberkleid  5:44 PM
A Jib image would also have had the java app layers, if i am not mistaken, right?

Ben Hale  5:45 PM
It would have, although I don't believe that they yet use the layers that Boot itself specifies in the new layers.idx. (edited)

Cora Iberkleid  5:45 PM
I don't knwo when Jib introduced it but if it was 2 years ago, Boot was a bit slow to add layering
New

Ben Hale  5:45 PM
Sure, they've been a bit slow to the whole K8s/image game.
5:46
But they've got it now and Jib is going to have to change to honor Boot's explicit description.

Cora Iberkleid  5:46 PM
i think the only thing left of jib would be the name
5:47
oh, you mean the layers
5:47
yeah
5:47
not all cnb spec

Ben Hale  5:48 PM
Yeah, they had an opinion of the best way to create layers for Boot but now that Boot has it's own opinion, they'll have to change their layering to honor the layers.idx.
5:48
Nothing major, just behind on the Boot 2.3 changes.

Cora Iberkleid  5:49 PM
I think someone on the #build channel said an unpacked jar starts 30% faster than a packed one. is that accurate?

Ben Hale  5:53 PM
That's me and yes.
5:54
And Boot 2.3 does a ton of work to get that down to just 30% with the new classpath.idx.

Cora Iberkleid  5:54 PM
:smile: cool, i might mention it in the course and wanted to make sure it was accurate
5:54
but again, jib unpacks the jar, so wouldn't it be the same there?

Ben Hale  5:57 PM
Yep, likely.  There's aren't competitive against Jib (even the stuff they don't do is easy enough for them to add).  It's all ammunition for "you aren't going to do it in your Dockerfile, are you?".  Our ammunition against Jib is the opposite of against Dockerfile, playing on it's weaknesses "you really can't do anything but this tightly prescribed thing, can you?".

Cora Iberkleid  5:57 PM
re shared cache and the java layers - if you have two Java apps, A and B, and they both have the exact same Boot version and list of dependencies in their pom files, then their BOOT-INF/lib and org/springframework layers would have the same SHA. When you build app A, you have to download all the jars from maven central and then those two layers are cached. And then when you build app B the first time you still have to download all the jars just to calculate the sha. But then B just points to the layer A created. So it's a space-saver, but not a time-saver on the first build. And then after that the checksum on the pom would have to change for either app to take that cached m2 repo and add to it.
5:58
Yeah, the more i understand CNB and Paketo and Jib the better I understand how big the ocean between them is (edited)
5:59
I mean, even just the fact that your config is in your pom for Jib, what a mess. the ability to have a standardized set of env vars is so much cleaner

Ben Hale  5:59 PM
Well, the odds that the BOOT-INF/lib is the same between any two applications is really low.  You'd both have to use like exactly spring-boot-starter-web and spring-boot-starter-actuator and nothing else.  So think about that layer avoidance as between versions of the same application.  Smaller-scale avoidance, but still helpful.

6:02
And as far as build times even things that you might think could be avoided can't for security reasons.  Registries don't allow you to just send up a list of hashes for your image and respond with what they don't yet have.  It'd allow me to create an image with every single layer, download that image later and grab credentials from all over the show.  So even deduped layers must be uploaded so that the registry knows you once had the layer and then it just throws the data away.  At that point you've established provenance and data can be downloaded at will, even across multi-tenant repositories on the same registry.

Cora Iberkleid  6:04 PM
this is really amazing
6:06
what a project, must have been an exciting journey to create it. the simplicity in terms of user experience understates the breadth and sophistication. hats off to you and all of the people involved. and thank you :smile:

Ben Hale  6:06 PM
Hey, no worries.  It was mostly other people doing the heavy lifting of solving my complaints about how it worked :slightly_smiling_face:
6:07
And Emily has confirmed that there is a pretty big performance regression in the latest lifecycle so you'd expect the demo to get 5-10s faster in the next release.

Cora Iberkleid  6:09 PM
How would you succinctly describe CNB?
6:10
It's not just a spec, it's an entire system.
6:10
I guess that's what the lifecycle is? The code that actually provides this cache management, etc system?
6:11
Spec, cache management system, plus sample platforms for CLI and hosted user experiences
6:13
or rather the lifecycle provides the ability to participate in a shared cache

Ben Hale  6:13 PM
The Cloud Native Buildpacks project encapsulates three specifications:
1. Buildpack Specification (how a buildpack is invoked and how its output is handled)
2. Platform Specification (how a platform like Heroku, kpack, pack drives collections of buildpacks)
3. Distribution (how buildpacks and builders are passed around the internet)
The lifecycle is the reference implementation of the nexus of the first two of those, but you could implement them from scratch if you so chose.






Cora Iberkleid  6:14 PM
Yeah, I've read that but I think if you don't have the right background it isn't clear
6:16
Would you say that any lifecycle implementation that met the specification would end up providing a system of sharing cache with the same characteristics?

Ben Hale  6:16 PM
It should yes.
6:17
The specs define a bunch of behaviors and if you implement them all, you get all the magic we've been talking about.  But implementing them all is such a pain that everyone will use the reference implementation that the project provides. (edited)
6:17
And key to this, is that we very explicitly do not provide the buildpacks themselves.  We don't want to be opinionated on how you run a Java application, just how you orchestrate builds of Java applications.

Cora Iberkleid  6:17 PM
It is kind of like Napster, right? Each client (each lifecycle program in each builder container instance) is able to find and reuse hashed data spread across a set of registries
6:20
and the analysis is the lifecycle gathering up the info each BP will need in order to decide if they can reuse the esiting layers or not
New

Ben Hale  6:36 PM
If you squint yeah, that’s a reasonable analogy.  The buildpacks effectively are “calculating” the hash (by writing a bunch of files to the filesystem) and there’s a decentralized “ledger” of those hashes in the universe.

Cora Iberkleid  6:37 PM
Napster meets Blockchain :slightly_smiling_face:
6:37
I don't know if that's technically accurate enough to be funny, but it's always fun to have a reason to say blockchain :slightly_smiling_face: (edited)