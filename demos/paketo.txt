@_ECHO_OFF
dclean

cd ${DEMO_TEMP}
if [ ! -d java-app ]; then git clone git@github.com:ciberkleid/cool-app java-app; fi
cd java-app; ./mvnw dependency:go-offline; cd ..

if [ ! -d go-app ]; then git clone git@github.com:ciberkleid/hello-go.git temp-hello-go; mkdir go-app; mv temp-hello-go/src/* ./go-app/; rm -rf temp-hello-go; fi
unset HELLO_ARG

if [ ! -d sample-buildpack ]; then git clone git@github.com:buildpacks/samples.git cnb-samples; echo -e "\n[[stacks]]\nid = \"io.buildpacks.stacks.bionic\"" >> cnb-samples/buildpacks/hello-world/buildpack.toml; mkdir sample-buildpack; mv cnb-samples/buildpacks/hello-world/* ./sample-buildpack/; rm -rf cnb-samples; fi

@_SKIPif [ ! -d node-app ]; then git clone git@github.com:paketo-buildpacks/samples.git paketo-samples; mkdir node-app; mv paketo-samples/demo-apps/app-source/* ./node-app/; rm -rf paketo-samples; fi

docker pull gcr.io/paketo-buildpacks/builder:base
docker pull gcr.io/paketo-buildpacks/run:base-cnb
docker pull gcr.io/paketo-buildpacks/run:0.0.15-base-cnb
@_SKIPpack build node-img -p node-app
pack build go-img -p go-app
pack build java-img -p java-app
pack rebase go-img --run-image gcr.io/paketo-buildpacks/run:base-cnb

# Start demo
clear
@_ECHO_ON
@_SKIPpack --help
@_SKIPpack build --help
ls
@_SKIPpack suggest-builders

pack set-default-builder gcr.io/paketo-buildpacks/builder:base
pack inspect-builder gcr.io/paketo-buildpacks/builder:base
clear

@_SKIPpack build node-img -p node-app
pack build go-img -p go-app
pack build java-img -p java-app

clear
docker images | grep "\-img"
# rebase
pack rebase go-img --run-image gcr.io/paketo-buildpacks/run:0.0.15-base-cnb
docker images | grep go-img

# user
docker run --entrypoint /bin/sh go-img -c id

# bom
pack inspect-image java-img --bom | jq
@_SKIPpack inspect-image java-img --bom | jq '.local[] | select(.name == "jre")'
@_SKIPpack inspect-image java-img --bom | jq '.local[] | select(.name == "dependencies")'

# bp
ls -l sample-buildpack/*
pack build java-img -p java-app -b from=builder -b sample-buildpack

# Spring Boot
cd java-app
bat pom.xml
@_SKIP./mvnw spring-boot:build-image -DskipTests
./mvnw clean package -DskipTests -P cnb
@_SKIPdocker images | grep builder
docker images | grep cool-app
@_SKIPpack inspect-image cool-app:1.0.0

@_SKIPdocker run -p 8080:8080 java-img:1.0.0
@_SKIPmvn spring-boot:build-image -Dspring-boot.build-image.builder=heroku/buildpacks:18 -Dspring-boot.build-image.imageName=java-img:heroku
@_SKIPmvn spring-boot:build-image -Dspring-boot.build-image.imageName=ciberkleid/java-img

