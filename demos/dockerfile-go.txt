@_ECHO_OFF
export DOCKER_BUILDKIT=0
dclean
setBatLang Dockerfile

# Set up demo files
if [ ! -d hello-go ]; then git clone git@github.com:ciberkleid/hello-go; fi
cd hello-go

cp Dockerfiles/Dockerfile src/
cd src
echo "echo \"mwahaha!\"; return;" > README.md; base64 /dev/urandom | head -c 10000 >> README.md
# To initialize, run: go mod init example.com/hello; go test
go clean -x -modcache
unset HELLO_ARG
go run hello.go

# Start demo

@_SKIP ##### KUBEACADEMY - START PART 1

clear
@_ECHO_ON

# sample app
tree
go run hello.go
go run hello.go world

# first build / app startup
bat Dockerfile
docker build . -t hello-img
clear
docker images
docker run hello-img
docker run hello-img sunshine
@_SKIP# Guaranteed: same OS, package installed, binary in PATH

# tagging
docker tag hello-img hello-img:1.6; docker tag hello-img hello-img:1
docker images | grep hello
sed -i '' 's/world/sunshine/g' Dockerfile
docker build . -t hello-img -t hello-img:1 -t hello-img:1.7
docker images | grep hello
cp ../Dockerfiles/* .
batd Dockerfile Dockerfile-1

clear
# build context
@_SKIPdu -hs * | sort -h
docker build . -t hello-img
docker run --rm -it --entrypoint /bin/sh hello-img -c "pwd; ls -l"
@_ECHO_OFF
setBatLang exclude
@_ECHO_ON
cp ../Dockerfiles/.dockerignore .; bat .dockerignore
@_ECHO_OFF
setBatLang Dockerfile
@_ECHO_ON
docker build . -t hello-img | grep Sending
@_SKIP # Reminder: ls -l; whoami; rm *; ls -l;
docker run --rm --entrypoint /bin/sh hello-img

# user
batd Dockerfile-1 Dockerfile-2
docker build . -t hello-img -f Dockerfile-2
docker run --rm --entrypoint /bin/sh hello-img -c "id"

@_SKIP ##### KUBEACADEMY - START PART 2
clear

# app shutdown (OS signals)
bat Dockerfile-2 | grep ENTRY
docker run --rm -e HELLO_SLEEP=1 hello-img
# bad listener (trapping)
docker run --rm --entrypoint sleep hello-img 10
# bad communicator (forwarding)
@_SKIPdocker run --rm --name hi --entrypoint sh hello-img -c "while true; do printf zzz; sleep 5; done"
docker run --rm --name hi -e HELLO_SLEEP=1 --entrypoint sh hello-img -c "hello fancy-stuff"
@_SKIPdocker exec hi ps -eaf
@_SKIPdocker stop hi
# options: exec or tini
@_SKIPdocker run --rm --name hi -e HELLO_SLEEP=1 --entrypoint sh hello-img -c "exec hello fancy-stuff"
@_SKIP# option 2: tini
@_SKIPdocker run --rm --name hi --init -e TINI_KILL_PROCESS_GROUP=1 --entrypoint sleep hello-img 30
bat Dockerfile-4

# layers/caching
docker images
docker history hello-img
bat Dockerfile-4
bat Dockerfile-5
@_SKIP# Talk about COPY command location, OS package commands, single command for dependencies and source
time docker build . -t hello-img -f Dockerfile-5 --no-cache
sed -i '' 's/Hello/Greetings/g' hello.go
time docker build . -t hello-img -f Dockerfile-5

@_SKIP# shell launch explained
@_SKIPcat Dockerfile-5 | grep ^ENTRY
@_SKIPgo run hello.go one and all
@_SKIPdocker run --rm hello-img one and all

# size
docker images
bat Dockerfile-6
docker build . -t hello-img -f Dockerfile-6
docker images
docker run --rm hello-img "dockerfile ninjas"
