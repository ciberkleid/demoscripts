@_ECHO_OFF
export DOCKER_BUILDKIT=0
dclean
setBatLang Dockerfile

# Set up demo files
if [ ! -d hello-go ]; then git clone git@github.com:ciberkleid/hello-go; fi
cd hello-go

cp Dockerfiles/Dockerfile src/
cp Dockerfiles/Dockerfile-1 src/
cd src
echo "echo \"mwahaha!\"; return;" > README.md; base64 /dev/urandom | head -c 10000 >> README.md
# To initialize, run: go mod init example.com/hello; go test
go clean -x -modcache
unset HELLO_ARG
go run hello.go

# Start demo

@_SKIP ##### KUBEACADEMY - START PART 1

clear
@_ECHO_ON

# sample app
tree
go run hello.go
go run hello.go world

# first build / app startup
bat Dockerfile
docker build . -t hello-img
clear
docker images
docker run hello-img
docker run hello-img sunshine
@_SKIP# Guaranteed: same OS, package installed, binary in PATH

# tagging
docker tag hello-img hello-img:1.6; docker tag hello-img hello-img:1
docker images | grep hello
sed -i '' 's/world/sunshine/g' Dockerfile
docker build . -t hello-img:1.7 -t hello-img:1 -t hello-img
docker images | grep hello
bat Dockerfile-1

clear
# build context
@_SKIPdu -hs * | sort -h
docker build . -t hello-img | grep Sending
docker run --rm -it --entrypoint /bin/sh hello-img
@_ECHO_OFF
setBatLang exclude
@_ECHO_ON
cp ../Dockerfiles/.dockerignore .; bat .dockerignore
@_ECHO_OFF
setBatLang Dockerfile
@_ECHO_ON
docker build . -t hello-img | grep Sending
docker run --rm --entrypoint /bin/sh hello-img -c "ls -l"

@_SKIP ##### KUBEACADEMY - START PART 2

@_ECHO_OFF
cp ../Dockerfiles/* .
@_ECHO_ON

clear
# app shutdown
bat Dockerfile | grep ENTRY
docker run --rm -e HELLO_SLEEP=1 hello-img
bat Dockerfile-2 | grep ENTRY
docker build . -t hello-img -f Dockerfile-2
docker run --rm --name hi -e HELLO_SLEEP=1 hello-img rising stars
@_SKIPdocker ps
@_SKIPdocker exec hi ps -ef
@_SKIPdocker stop hi
# option 1: exec
bat Dockerfile-3-exec | grep ENTRY
# option 2: tini
# docker run --init -e TINI_KILL_PROCESS_GROUP=1 ...
bat Dockerfile-3
@_SKIPdocker run --rm --name hi --init -e TINI_KILL_PROCESS_GROUP=1 --entrypoint sleep hello-img 30

clear
# layers/caching
docker history hello-img
bat Dockerfile-3
bat Dockerfile-4
@_SKIP# Talk about COPY command location, OS package commands, single command for dependencies and source
time docker build . -t hello-img -f Dockerfile-4 --no-cache
sed -i '' 's/Hello/Greetings/g' hello.go
time docker build . -t hello-img -f Dockerfile-4

@_SKIP# shell launch explained
@_SKIPcat Dockerfile-4 | grep ^ENTRY
@_SKIPgo run hello.go one and all
@_SKIPdocker run --rm hello-img one and all


@_SKIP ##### KUBEACADEMY - START PART 3

clear
@_ECHO_OFF
# silent cleanup
docker ps -a -q | xargs -n1 docker rm -f > /dev/null 2>&1
docker image prune -f > /dev/null 2>&1
docker rmi hello-img:1.6 > /dev/null 2>&1
docker rmi hello-img:1.7 > /dev/null 2>&1
docker rmi hello-img:1 > /dev/null 2>&1

@_ECHO_ON
clear
# user
docker run --rm --entrypoint /bin/sh hello-img -c "id"
batd Dockerfile-4 Dockerfile-5
docker build . -t hello-img -f Dockerfile-5
docker run --rm --entrypoint /bin/sh hello-img -c "id"

clear
# size
docker images
bat Dockerfile-6
docker build . -t hello-img -f Dockerfile-6
docker images
docker run --rm hello-img "dockerfile ninjas"

clear
# inspect
docker inspect hello-img | more

# make it pretty
docker inspect hello-img | jq

# format templating
docker inspect hello-img -f '{{json .}}' | jq keys
docker inspect hello-img -f '{{json .Config}}' | jq

# inspect with dive
dive hello-img
@_SKIP TAB, TAB, TAB, Ctrl+C
docker images
dive


