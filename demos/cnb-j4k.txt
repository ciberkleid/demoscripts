#_ECHO_OFF

# Check which process is on port 8080:
lsof -i :8080 | grep LISTEN

dclean
docker volume prune -f

docker pull gcr.io/paketo-buildpacks/builder:base-platform-api-0.3
docker pull paketobuildpacks/run:base-cnb
docker pull buildpacksio/lifecycle:0.8.1
pack set-default-builder gcr.io/paketo-buildpacks/builder:base-platform-api-0.3

cd ${DEMO_TEMP}
if [ ! -d buildpack-samples ]; then git clone https://github.com/buildpacks/samples.git buildpack-samples; fi
if [ ! -d go-demo-app ]; then git clone git@github.com:springone-tour-2020-cicd/go-demo-app.git go-demo-app; fi
if [ ! -d java-demo-app ]; then git clone git@github.com:ciberkleid/hello-java java-demo-app; fi

cd ${DEMO_TEMP}/java-demo-app
rm -rf demo
rm -rf Dockerfiles
rm -rf kpack
rm -rf bump
rm -rf manifest.yml
rm HELP.md
./mvnw dependency:go-offline

cd ${DEMO_TEMP}/go-demo-app
rm README.md
pack build go-demo-img --no-pull

clear
#_ECHO_ON

##_ECHO_# Sample app
ls
#go run hello-server.go 2>&1 > /dev/null &
#curl localhost:8080
#pkill hello-server && wait $!

#clear
#_ECHO_# Dockerfile (docker build -f Dockerfile ...)
bat Dockerfile

#_ECHO_# Buildpacks (platform + lifecycle + base images + buildpacks)
pack set-default-builder gcr.io/paketo-buildpacks/builder:base-platform-api-0.3
pack build go-demo-img --no-pull
docker images

clear
#_ECHO_# Transparency
pack inspect-image go-demo-img
#pack inspect-image go-demo-img --bom | jq
pack inspect-builder

clear
#_ECHO_# OS patching
docker pull gcr.io/paketo-buildpacks/run:0.0.24-base-cnb
docker tag gcr.io/paketo-buildpacks/run:0.0.24-base-cnb paketobuildpacks/run:base-cnb
docker images | grep run
pack rebase go-demo-img --no-pull
catd <(docker inspect e813a1645722) <(docker inspect go-demo-img) | tail -n20

clear
#_ECHO_# Custom buildpacks
ls ../buildpack-samples/buildpacks/hello-world/*
pack build go-demo-img --no-pull --buildpack from=builder --buildpack ../buildpack-samples/buildpacks/hello-world

clear
##_ECHO_# Publish
#pack build ciberkleid/go-demo-img:pack-1.0.0 --no-pull --publish

#_ECHO_# Spring Boot
cd ${DEMO_TEMP}/java-demo-app; ls
#./mvnw spring-boot:build-image -DskipTests
bat pom.xml
./mvnw package -DskipTests -Ppk
#docker images | grep "builder\|java"
#pack inspect-image hello-java:1.0.0 --bom | jq '.local[].name' -r
pack inspect-image hello-java:1.0.0 --bom | jq '.local[] | select(.name == "jre")'
pack inspect-image hello-java:1.0.0 --bom | jq '.local[] | select(.name == "dependencies")'

dive hello-java:1.0.0

#mvn spring-boot:build-image -Dspring-boot.build-image.imageName=ciberkleid/hello-java:1.0.0
#mvn spring-boot:build-image -Dspring-boot.build-image.builder=heroku/buildpacks:18 -Dspring-boot.build-image.imageName=hello-java:1.0.0:heroku
